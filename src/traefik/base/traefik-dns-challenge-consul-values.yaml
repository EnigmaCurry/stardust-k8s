# Traefik Helm values
# Make sure to add all necessary ACME DNS environment variables at the bottom.
image:
  name: traefik
  tag: "v2.5"
persistence:
    enabled: true
volumes:
   - name: consul-ca-cert
     mountPath: "/certs/consul-ca/"
     type: secret
additionalArguments:
  # - "--log.level=DEBUG"
  - "--providers.kubernetesingress=true"
  ## Forward all HTTP to HTTPs
  - "--entrypoints.web.http.redirections.entryPoint.to=:443"
  ## DNS-01 ACME challenge config
  - "--certificatesresolvers.letsencrypt.acme.storage=/data/acme.json"
  - "--certificatesresolvers.letsencrypt.acme.dnsChallenge.provider=$(ACME_DNSCHALLENGE_PROVIDER)"
  - "--certificatesresolvers.letsencrypt.acme.email=$(ACME_EMAIL)"
  - "--certificatesresolvers.letsencrypt.acme.caserver=$(ACME_CA_SERVER)"
  ## Consul config:
  # Enable Traefik to use Consul Connect:
  - "--providers.consulcatalog.connectAware=true"
  # Traefik routes should only be created for services with explicit `traefik.enable=true` service-tags:
  - "--providers.consulcatalog.exposedByDefault=false"
  # For routes that are exposed (`traefik.enable=true`) use Consul Connect by default: 
  - "--providers.consulcatalog.connectByDefault=true"
  # Rename the service inside Consul: `traefik-system-ingress`
  - "--providers.consulcatalog.servicename=traefik-system-ingress"
  # Connect Traefik to the Consul service:
  - "--providers.consulcatalog.endpoint.address=consul-server.consul-system.svc.cluster.local:8501"
  - "--providers.consulcatalog.endpoint.scheme=https"
  - "--providers.consulcatalog.endpoint.tls.ca=/certs/consul-ca/tls.crt"
  #### Optional, uncomment to use Consul KV as a configuration provider:
  ## - "--providers.consul.endpoints=consul-server.consul-system.svc.cluster.local:8501"
  ## # The key name in Consul KV that traefik will watch:
  ## - "--providers.consulcatalog.prefix=traefik"
service:
  annotations:
    # Register the service in Consul as `traefik-system-ingress`:
    consul.hashicorp.com/service-sync: "true"
    consul.hashicorp.com/service-name: "traefik-system-ingress"
deployment:
  initContainers:
    ## volume-permissions makes sure /data volume is owned by the traefik security context 65532
    - name: volume-permissions
      image: busybox:1.31.1
      command: ["sh", "-c", "chown -R 65532:65532 /data && chmod -Rv 600 /data && chmod 700 /data"]
      volumeMounts:
        - name: data
          mountPath: /data
    ## DEBUG: add a sleep before Traefik starts, to manually fix volumes etc.
    # - name: sleep
    #   image: alpine:3
    #   command: ["sh", "-c", "sleep 9999999"]
    #   volumeMounts:
    #     - name: data
    #       mountPath: /data
ports:
  ## Add the wildcard certificate to the entrypoint, then all routers inherit it:
  ## https://doc.traefik.io/traefik/routing/entrypoints/#tls
  websecure:
    tls:
      enabled: true
      certResolver: letsencrypt
      domains:
        - main: "$(ACME_DOMAIN)"
env:
  ## All ACME variables come from traefik-acme-secret:
  - name: ACME_DOMAIN
    valueFrom:
      secretKeyRef:
        name: traefik-acme-secret
        key: ACME_DOMAIN
  - name: ACME_EMAIL
    valueFrom:
      secretKeyRef:
        name: traefik-acme-secret
        key: ACME_EMAIL
  - name: ACME_CA_SERVER
    valueFrom:
      secretKeyRef:
        name: traefik-acme-secret
        key: ACME_CA_SERVER
  - name: ACME_DNSCHALLENGE_PROVIDER
    valueFrom:
      secretKeyRef:
        name: traefik-acme-secret
        key: ACME_DNSCHALLENGE_PROVIDER

  # Add all of the environment variables necessary
  # for your domain's DNS ACME challenge:
  # See https://doc.traefik.io/traefik/https/acme/#providers
  # Put the actual secrets into traefik-acme-secret
  - name: DO_AUTH_TOKEN
    valueFrom:
      secretKeyRef:
        name: traefik-acme-secret
        key: DO_AUTH_TOKEN
